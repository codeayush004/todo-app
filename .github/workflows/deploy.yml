name: Deploy to AKS (GitOps)

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    # ✅ Step 1: Login to Azure using your service principal JSON
    - name: Log in to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # ✅ Step 2: Login to Azure Container Registry (more reliable than az acr login)
    - name: Log in to ACR
      uses: azure/docker-login@v2
      with:
        login-server: ${{ secrets.ACR_NAME }}.azurecr.io
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    # ✅ Step 3: Build and push Docker image (auto-retry if network/DNS fails)
    - name: Build and push Docker image
      run: |
        IMAGE=${{ secrets.ACR_NAME }}.azurecr.io/todo-app:${{ github.sha }}
        echo "IMAGE=$IMAGE" >> $GITHUB_ENV
        docker build -t $IMAGE .

        echo "🔄 Pushing image to ACR..."
        for i in 1 2 3; do
          docker push $IMAGE && break || (echo "⚠️  Push failed, retrying ($i/3)..." && sleep 10)
        done

    # ✅ Step 4: Set AKS context
    - name: Set AKS context
      run: |
        az aks get-credentials \
          --resource-group ${{ secrets.AZ_RESOURCE_GROUP }} \
          --name ${{ secrets.AKS_NAME }} \
          --overwrite-existing

    # ✅ Step 5: Update AKS deployment
    - name: Deploy updated image to AKS
      run: |
        echo "🚀 Updating image in AKS deployment..."
        kubectl set image deployment/todo-backend todo=${{ env.IMAGE }} --namespace default || true
        kubectl apply -f k8s/
        echo "✅ Waiting for rollout to finish..."
        kubectl rollout status deployment/todo-backend
